import p from"node:fs/promises";function $(t){let e={$id:t.$id,title:t.title,description:t.description,properties:[]};for(let r in t.properties){let n=t.properties[r],o=n.$ref,i=n.anyOf?.map(c=>c.type)??[],a=n.type,f=n.description,s={$ref:o,anyOf:i,type:a,key:r,description:f};e.properties.push(s)}return e}function l(t,e){let r=t.indexOf(e);return r<0?t:t.substring(0,r)}function u(t,e=null){let r=new Map([["integer","int"],["boolean","bool"],["number","float"]]),n=$(t),o=`
<?php
declare(strict_types=1);

`;e&&(o+=`namespace ${e};

`),o+=`/**
`;let i=" * ";(n.title??null)&&(o+=`${i}${n.title}
`),(n.description??null)&&(o+=`${i}${n.description}
`);for(let s of n.properties){let c=d(s,r);o+=`${i}@property ${c} $${s.key} ${s.description??""}
`}o+=` */
`;let a=l(n.$id,".");o+=`class ${a}
{
`;let f="    ";for(let s of n.properties){let c=d(s,r);o+=`${f}public ${c} $${s.key};
`}return o+="}",o}function d(t,e){return t.$ref?l(t.$ref,"."):t.anyOf&&t.anyOf.length?t.anyOf.flatMap(r=>{let n=e.get(r)??r;return n||[]}).join("|"):e.get(t.type)??t.type}var g="0.0.1",y="https://github.com/kittttttan/json-schema-model",m=["php"];var x=process.argv[2]??null,b=process.argv[3]??null;(async()=>await w(x,b))();async function w(t,e){if(!t||!e||["-h","-v"].includes(t)){console.log(`options:
format  ${m.join(",")}
path    path to json file or deirectory

version: ${g}
url: ${y}`);return}if(!m.includes(t.toLowerCase())){console.error(`invalid format: ${t}`);return}let r=await p.stat(e);if(r.isFile()){let n=await p.readFile(e,"utf8"),o=JSON.parse(n),i=u(o);console.log(i);return}if(r.isDirectory()){let n="output/php/";try{await p.mkdir(n,{recursive:!0})}catch{}let o=await p.readdir(e);for(let i of o){if(!i.endsWith(".json")){console.log(`ignore ${i}`);continue}let a=`${e}/${i}`,f=await p.readFile(a,"utf8"),s=l(i,"."),c=JSON.parse(f),h=u(c);p.writeFile(`${n}/${s}.php`,h)}}}
